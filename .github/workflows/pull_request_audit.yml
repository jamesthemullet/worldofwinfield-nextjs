name: CI Tests For World Of Winfield
on:
  pull_request:
    branches: [main]
jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Vercel Action
        id: vercel_action
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.WOW_VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.WOW_PROJECT_ID }}
      - name: Audit URLs using Lighthouse
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            ${{ steps.vercel_action.outputs.preview-url }}
          budgetPath: '.github/lighthouse/budget.json'
          uploadArtifacts: true
          runs: 1
      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v8
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const result = ${{ steps.lighthouse_audit.outputs.manifest }}[0].summary
            const formatResult = (res) => Math.round((res * 100))
            Object.keys(result).forEach(key => result[key] = formatResult(result[key]))
            const score = res => res >= 90 ? 'üü¢' : res >= 50 ? 'üü†' : 'üî¥'
            const comment = [
                `‚ö°Ô∏è [Lighthouse report] for the changes in this PR:`,
                '| Category | Score |',
                '| --- | --- |',
                `| ${score(result.performance)} Performance | ${result.performance} |`,
                `| ${score(result.accessibility)} Accessibility | ${result.accessibility} |`,
                `| ${score(result['best-practices'])} Best practices | ${result['best-practices']} |`,
                `| ${score(result.seo)} SEO | ${result.seo} |`,
                `| ${score(result.pwa)} PWA | ${result.pwa} |`,
                ' ',
            ].join('\n')
             core.setOutput("comment", comment);
      - name: Add comment to PR
        id: comment_to_pr
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ github.event.issue.number }}
          header: lighthouse
          message: |
            ${{ steps.format_lighthouse_score.outputs.comment }}
  axe:
    runs-on: ubuntu-latest
    env:
      WORDPRESS_API_URL: https://blog.worldofwinfield.co.uk/graphql
      GITHUB_API_SECRET: ${{ secrets.PIPELINE_GITHUB_API_SECRET }}
    steps:
      - uses: actions/checkout@v5
      - name: Use Node.js 18.x
        uses: actions/setup-node@v6
        with:
          node-version: 22.x
      - run: yarn install
      - name: Get Chromium version üåê
        run: |
          CHROMIUM_VERSION=$(wget -qO- https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE | cut -d. -f1)
          echo "Chromium version: $CHROMIUM_VERSION"
          echo "CHROMIUM_VERSION=$CHROMIUM_VERSION" >> $GITHUB_ENV
      - name: Setup Chrome üåê
        id: setup-chrome
        uses: browser-actions/setup-chrome@v2
        with:
          chrome-version: ${{ env.CHROMIUM_VERSION }}
      - name: Install chromedriver üöó
        run: |
          echo "Installing chromedriver version: $CHROMIUM_VERSION"
          yarn add chromedriver@$CHROMIUM_VERSION
          echo "chromedriver version: $(chromedriver --version)"
      - run: yarn run build
      - run: yarn dev & npx wait-on http://localhost:3000
      - name: Run axe
        run: |
          yarn add @axe-core/cli
          CHROMIUM_VERSION=$(google-chrome --version | cut -d' ' -f3 | cut -d'.' -f1)
          yarn add chromedriver@$CHROMIUM_VERSION
          npx axe --chromedriver-path $(yarn bin)/chromedriver http://localhost:3000/ --load-delay=1500 --exit
  unit_tests:
    runs-on: ubuntu-latest
    env:
      WORDPRESS_API_URL: https://blog.worldofwinfield.co.uk/graphql
      GITHUB_API_SECRET: ${{ secrets.PIPELINE_GITHUB_API_SECRET }}
    steps:
      - uses: actions/checkout@v5
      - name: Install dependencies
        run: yarn install
      - name: Run unit tests
        run: yarn test
